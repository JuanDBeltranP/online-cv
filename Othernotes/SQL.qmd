# SQL basics

SQL (Structured Query Language) is a standard language for managing data held in a relational database management system (RDBMS) or for stream processing in a relational data stream management system (RDSMS).

**1. Introduction to SQL**

SQL is used to communicate with a database. It is the standard language for relational database management systems. SQL statements are used to perform tasks such as update data on a database, or retrieve data from a database.

**2. SQL Syntax**

A SQL query must be written in the following form:

``` sql
SELECT column1, column2, ...
FROM table_name;
```

Here, `SELECT` is used to select data from a database. The data returned is stored in a result table, called the result-set. `FROM` is used to specify which table to select or delete data from.

**3. SQL SELECT Statement**

The SELECT statement is used to select data from a database. The data returned is stored in a result table, called the result-set.

Example:

``` sql
SELECT * FROM Customers;
```

This SQL statement selects all data from the "Customers" table.

**4. SQL SELECT DISTINCT Statement**

The SELECT DISTINCT statement is used to return only distinct (different) values. It is used to eliminate duplicate values.

Example:

``` sql
SELECT DISTINCT Country FROM Customers;
```

This SQL statement selects only the distinct values from the "Country" columns from the "Customers" table.

**5. SQL WHERE Clause**

The WHERE clause is used to filter records. It is used to extract only those records that fulfill a specified condition.

Example:

``` sql
SELECT * FROM Customers
WHERE Country='Mexico';
```

This SQL statement selects all fields from "Customers" where country is "Mexico".

**6. SQL AND, OR and NOT Operators**

The WHERE clause can be combined with AND, OR, and NOT operators. The AND and OR operators are used to filter records based on more than one condition. The NOT operator displays a record if the condition(s) is NOT TRUE.

Example:

``` sql
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
```

This SQL statement selects all fields from "Customers" where country is "Germany" AND city is "Berlin".

**7. SQL ORDER BY Keyword**

The ORDER BY keyword is used to sort the result-set in ascending or descending order. The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

Example:

``` sql
SELECT * FROM Customers
ORDER BY Country;
```

This SQL statement selects all customers from the "Customers" table, sorted by the "Country" column.

**8. SQL INSERT INTO Statement**

The INSERT INTO statement is used to insert new records in a table.

Example:

``` sql
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
```

This SQL statement inserts a new record into the "Customers" table.

**9. SQL UPDATE Statement**

The UPDATE statement is used to modify the existing records in a table.

Example:

``` sql
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
```

This SQL statement updates the "Customers" table.

**10. SQL DELETE Statement**

The DELETE statement is used to delete existing records in a table.

Example:

``` sql
DELETE FROM Customers
WHERE CustomerName='Alfreds Futterkiste';
```

Apologies for the interruption. Let's continue with the SQL tutorial:

This SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table.

**11. SQL SELECT TOP Clause**

The SELECT TOP clause is used to specify the number of records to return. This can be particularly useful when working with large databases.

Example:

``` sql
SELECT TOP 3 * FROM Customers;
```

This SQL statement selects the first 3 records from the "Customers" table.

**12. SQL LIKE Operator**

The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

Example:

``` sql
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';
```

This SQL statement selects all customers with a name starting with "a".

**13. SQL JOINS**

A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

Example:

``` sql
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
```

This SQL statement lists all orders with customer names.

**14. SQL GROUP BY Statement**

The GROUP BY statement groups rows that have the same values in specified columns into aggregated data.

Example:

``` sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;
```

This SQL statement lists the number of customers in each country.

**15. SQL HAVING Clause**

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

Example:

``` sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;
```

This SQL statement lists the countries with more than 5 customers.

This is a basic introduction to SQL. SQL is a powerful language with many more features and capabilities. For more advanced topics, you might want to look into subqueries, stored procedures, triggers, and transactions.
